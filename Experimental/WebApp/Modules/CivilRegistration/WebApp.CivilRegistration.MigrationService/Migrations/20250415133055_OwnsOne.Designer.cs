// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.CivilRegistration.Infrastructure.Persistence;

#nullable disable

namespace WebApp.CivilRegistration.MigrationService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250415133055_OwnsOne")]
    partial class OwnsOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("WebApp_CivilRegistration")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.DeathCertificates.Entities.DeathCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeceasedId")
                        .HasColumnType("int");

                    b.Property<int?>("WidowedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeceasedId");

                    b.HasIndex("WidowedId");

                    b.ToTable("DeathCertificates", "WebApp_CivilRegistration");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.DivorceCertificates.Entities.DivorceCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MarriageCertificateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarriageCertificateId");

                    b.ToTable("DivorceCertificates", "WebApp_CivilRegistration");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.MarriageCertificates.Entities.MarriageCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Person1Id")
                        .HasColumnType("int");

                    b.Property<int>("Person2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Person1Id");

                    b.HasIndex("Person2Id");

                    b.ToTable("MarriageCertificates", "WebApp_CivilRegistration");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStateMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("MaritalStateMachines", "WebApp_CivilRegistration");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<int>("StateMachineId")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateMachineId", "Version")
                        .IsUnique();

                    b.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                    b.HasDiscriminator().HasValue("MaritalStatus");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Persons", "WebApp_CivilRegistration");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Deceased", b =>
                {
                    b.HasBaseType("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus");

                    b.HasDiscriminator().HasValue("Deceased");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Divorced", b =>
                {
                    b.HasBaseType("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus");

                    b.HasDiscriminator().HasValue("Divorced");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Married", b =>
                {
                    b.HasBaseType("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus");

                    b.HasDiscriminator().HasValue("Married");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Single", b =>
                {
                    b.HasBaseType("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus");

                    b.HasDiscriminator().HasValue("Single");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Widowed", b =>
                {
                    b.HasBaseType("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus");

                    b.HasDiscriminator().HasValue("Widowed");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.DeathCertificates.Entities.DeathCertificate", b =>
                {
                    b.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "Deceased")
                        .WithMany()
                        .HasForeignKey("DeceasedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "Widowed")
                        .WithMany()
                        .HasForeignKey("WidowedId");

                    b.Navigation("Deceased");

                    b.Navigation("Widowed");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.DivorceCertificates.Entities.DivorceCertificate", b =>
                {
                    b.HasOne("WebApp.CivilRegistration.Domain.MarriageCertificates.Entities.MarriageCertificate", "MarriageCertificate")
                        .WithMany()
                        .HasForeignKey("MarriageCertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarriageCertificate");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.MarriageCertificates.Entities.MarriageCertificate", b =>
                {
                    b.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "Person1")
                        .WithMany()
                        .HasForeignKey("Person1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "Person2")
                        .WithMany()
                        .HasForeignKey("Person2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person1");

                    b.Navigation("Person2");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStateMachine", b =>
                {
                    b.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "Person")
                        .WithOne("MaritalStateMachine")
                        .HasForeignKey("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStateMachine", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStatus", b =>
                {
                    b.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStateMachine", "StateMachine")
                        .WithMany("States")
                        .HasForeignKey("StateMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateMachine");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Deceased", b =>
                {
                    b.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.DeceasedPayload", "Payload", b1 =>
                        {
                            b1.Property<int>("DeceasedId")
                                .HasColumnType("int");

                            b1.HasKey("DeceasedId");

                            b1.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                            b1.WithOwner()
                                .HasForeignKey("DeceasedId");

                            b1.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.DeathInformation", "DeathInformation", b2 =>
                                {
                                    b2.Property<int>("DeceasedPayloadDeceasedId")
                                        .HasColumnType("int");

                                    b2.Property<int>("DeathCertificateId")
                                        .HasColumnType("int");

                                    b2.Property<int>("DeceasedAtAge")
                                        .HasColumnType("int");

                                    b2.HasKey("DeceasedPayloadDeceasedId");

                                    b2.HasIndex("DeathCertificateId");

                                    b2.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.DeathCertificates.Entities.DeathCertificate", "DeathCertificate")
                                        .WithMany()
                                        .HasForeignKey("DeathCertificateId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("DeceasedPayloadDeceasedId");

                                    b2.Navigation("DeathCertificate");
                                });

                            b1.Navigation("DeathInformation")
                                .IsRequired();
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Divorced", b =>
                {
                    b.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.DivorcedPayload", "Payload", b1 =>
                        {
                            b1.Property<int>("DivorcedId")
                                .HasColumnType("int");

                            b1.HasKey("DivorcedId");

                            b1.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                            b1.WithOwner()
                                .HasForeignKey("DivorcedId");

                            b1.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.DivorceInformation", "DivorceInformation", b2 =>
                                {
                                    b2.Property<int>("DivorcedPayloadDivorcedId")
                                        .HasColumnType("int");

                                    b2.Property<int>("DivorceCertificateId")
                                        .HasColumnType("int");

                                    b2.Property<int>("DivorcedAtAge")
                                        .HasColumnType("int");

                                    b2.Property<int>("DivorcedFromId")
                                        .HasColumnType("int");

                                    b2.HasKey("DivorcedPayloadDivorcedId");

                                    b2.HasIndex("DivorceCertificateId");

                                    b2.HasIndex("DivorcedFromId");

                                    b2.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.DivorceCertificates.Entities.DivorceCertificate", "DivorceCertificate")
                                        .WithMany()
                                        .HasForeignKey("DivorceCertificateId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "DivorcedFrom")
                                        .WithMany()
                                        .HasForeignKey("DivorcedFromId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("DivorcedPayloadDivorcedId");

                                    b2.Navigation("DivorceCertificate");

                                    b2.Navigation("DivorcedFrom");
                                });

                            b1.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.MarriageInformation", "MarriageInformation", b2 =>
                                {
                                    b2.Property<int>("DivorcedPayloadDivorcedId")
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriageCertificateId")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriedAtAge")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriedWithId")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.HasKey("DivorcedPayloadDivorcedId");

                                    b2.HasIndex("MarriageCertificateId");

                                    b2.HasIndex("MarriedWithId");

                                    b2.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                                    b2.WithOwner()
                                        .HasForeignKey("DivorcedPayloadDivorcedId");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.MarriageCertificates.Entities.MarriageCertificate", "MarriageCertificate")
                                        .WithMany()
                                        .HasForeignKey("MarriageCertificateId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "MarriedWith")
                                        .WithMany()
                                        .HasForeignKey("MarriedWithId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("MarriageCertificate");

                                    b2.Navigation("MarriedWith");
                                });

                            b1.Navigation("DivorceInformation")
                                .IsRequired();

                            b1.Navigation("MarriageInformation")
                                .IsRequired();
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Married", b =>
                {
                    b.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.MarriedPayload", "Payload", b1 =>
                        {
                            b1.Property<int>("MarriedId")
                                .HasColumnType("int");

                            b1.HasKey("MarriedId");

                            b1.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                            b1.WithOwner()
                                .HasForeignKey("MarriedId");

                            b1.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.MarriageInformation", "MarriageInformation", b2 =>
                                {
                                    b2.Property<int>("MarriedPayloadMarriedId")
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriageCertificateId")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriedAtAge")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriedWithId")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.HasKey("MarriedPayloadMarriedId");

                                    b2.HasIndex("MarriageCertificateId");

                                    b2.HasIndex("MarriedWithId");

                                    b2.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.MarriageCertificates.Entities.MarriageCertificate", "MarriageCertificate")
                                        .WithMany()
                                        .HasForeignKey("MarriageCertificateId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("MarriedPayloadMarriedId");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "MarriedWith")
                                        .WithMany()
                                        .HasForeignKey("MarriedWithId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.Navigation("MarriageCertificate");

                                    b2.Navigation("MarriedWith");
                                });

                            b1.Navigation("MarriageInformation")
                                .IsRequired();
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Single", b =>
                {
                    b.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.SinglePayload", "Payload", b1 =>
                        {
                            b1.Property<int>("SingleId")
                                .HasColumnType("int");

                            b1.HasKey("SingleId");

                            b1.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                            b1.WithOwner()
                                .HasForeignKey("SingleId");
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Widowed", b =>
                {
                    b.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.WidowedPayload", "Payload", b1 =>
                        {
                            b1.Property<int>("WidowedId")
                                .HasColumnType("int");

                            b1.HasKey("WidowedId");

                            b1.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                            b1.WithOwner()
                                .HasForeignKey("WidowedId");

                            b1.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.MarriageInformation", "MarriageInformation", b2 =>
                                {
                                    b2.Property<int>("WidowedPayloadWidowedId")
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriageCertificateId")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriedAtAge")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.Property<int>("MarriedWithId")
                                        .ValueGeneratedOnUpdateSometimes()
                                        .HasColumnType("int");

                                    b2.HasKey("WidowedPayloadWidowedId");

                                    b2.HasIndex("MarriageCertificateId");

                                    b2.HasIndex("MarriedWithId");

                                    b2.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.MarriageCertificates.Entities.MarriageCertificate", "MarriageCertificate")
                                        .WithMany()
                                        .HasForeignKey("MarriageCertificateId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "MarriedWith")
                                        .WithMany()
                                        .HasForeignKey("MarriedWithId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("WidowedPayloadWidowedId");

                                    b2.Navigation("MarriageCertificate");

                                    b2.Navigation("MarriedWith");
                                });

                            b1.OwnsOne("WebApp.CivilRegistration.Domain.Persons.Entities.WidowhoodInformation", "WidowhoodInformation", b2 =>
                                {
                                    b2.Property<int>("WidowedPayloadWidowedId")
                                        .HasColumnType("int");

                                    b2.Property<int>("WidowedAtAge")
                                        .HasColumnType("int");

                                    b2.Property<int>("WidowedFromId")
                                        .HasColumnType("int");

                                    b2.HasKey("WidowedPayloadWidowedId");

                                    b2.HasIndex("WidowedFromId");

                                    b2.ToTable("MaritalStatuses", "WebApp_CivilRegistration");

                                    b2.HasOne("WebApp.CivilRegistration.Domain.Persons.Entities.Person", "WidowedFrom")
                                        .WithMany()
                                        .HasForeignKey("WidowedFromId")
                                        .OnDelete(DeleteBehavior.Cascade)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("WidowedPayloadWidowedId");

                                    b2.Navigation("WidowedFrom");
                                });

                            b1.Navigation("MarriageInformation")
                                .IsRequired();

                            b1.Navigation("WidowhoodInformation")
                                .IsRequired();
                        });

                    b.Navigation("Payload")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.MaritalStateMachine", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("WebApp.CivilRegistration.Domain.Persons.Entities.Person", b =>
                {
                    b.Navigation("MaritalStateMachine")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
